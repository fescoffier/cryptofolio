# Default values for cryptofolio.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

api:
  replicaCount: 1
  image:
    repository: nginx
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""
  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""
  podAnnotations: {}
  podSecurityContext: {}
    # fsGroup: 2000
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths: []
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

app:
  replicaCount: 1
  image:
    repository: nginx
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""
  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""
  podAnnotations: {}
  podSecurityContext: {}
    # fsGroup: 2000
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths: []
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

jobs:
  collector:
    environment: Production
    config:
      logLevel: Information
      secrets:
        connectionStrings:
          name: connection-strings
          data:
            cryptofolioContext: cryptofolio-context
      connectionStrings:
        redis: redis-master-0.redis-headless.default.svc.cluster.local:6379,redis-replicas-0.redis-headless.default.svc.cluster.local:6379,redis-replicas-1.redis-headless.default.svc.cluster.local:6379
      kafka:
        producerConfig:
          {
            "BootstrapServers": "kafka-0.kafka-headless.default.svc.cluster.local:9092,kafka-1.kafka-headless.default.svc.cluster.local:9092,kafka-2.kafka-headless.default.svc.cluster.local:9092"
          }
        consumerConfig:
          {
            "BootstrapServers": "kafka-0.kafka-headless.default.svc.cluster.local:9092,kafka-1.kafka-headless.default.svc.cluster.local:9092,kafka-2.kafka-headless.default.svc.cluster.local:9092",
            "GroupId": "job-collector",
            "AutoOffsetReset": "Earliest",
            "EnablePartitionEof": true,
            "EnableAutoCommit": false,
            "MaxPollIntervalMs": 300000
          }
      elasticsearch:
        nodes:
          - http://elasticsearch-0.elasticsearch-headless.default.svc.cluster.local:9200
          - http://elasticsearch-1.elasticsearch-headless.default.svc.cluster.local:9200
          - http://elasticsearch-2.elasticsearch-headless.default.svc.cluster.local:9200
      data:
        cronCheckIntervalMs: 1000
        invalidCronCheckIntervalMs: 60000
        schedules:
          assetDataRequest: "0 0 1 1 1"
          assetTickerDataRequest: "0 0 1 1 1"
          exchangeDataRequest: "0 0 1 1 1"
      coingecko:
        apiUri: https://api.coingeck.com/api/v3
        rateLimiterKey: Coingecko:Calls
        rateLimiterKeyExiprationSeconds: 90
        rateLimiterMaxValue: 50
        rateLimiterCheckIntervalMs: 1000
    replicaCount: 3
    image:
      repository: registry.digitalocean.com/cryptofolio/jobs/collector
      pullPolicy: Always
      tag: latest
    imagePullSecrets: []
    nameOverride: cryptofolio-collector-job
    fullnameOverride: cryptofolio-collector-job
    serviceAccount:
      create: false
      name: cryptofolio-collector-job
      annotations: {}
      imagePullSecrets:
        - name: cryptofolio
    podAnnotations: {}
    podSecurityContext: {}
      # fsGroup: 2000
    securityContext: {}
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
      # runAsUser: 1000
    resources:
      limits:
        cpu: 1
        memory: 1G
      requests:
        memory: 128Mi
    livenessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
    autoscaling:
      enabled: false
      # minReplicas: 1
      # maxReplicas: 100
      # targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80
    nodeSelector: {}
    tolerations: []
    affinity: {}
  handlers:
    collector:
    replicaCount: 3
    image:
      repository: registry.digitalocean.com/cryptofolio/jobs/handlers
      pullPolicy: Always
      tag: latest
    imagePullSecrets: []
    nameOverride: cryptofolio-handlers-job
    fullnameOverride: cryptofolio-handlers-job
    serviceAccount:
      create: true
      annotations: {}
      name: cryptofolio-handlers-job
    podAnnotations: {}
    podSecurityContext: {}
      # fsGroup: 2000
    securityContext: {}
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
      # runAsUser: 1000
    resources:
      limits:
        cpu: 1
        memory: 512Mi
      requests:
        memory: 128Mi
    autoscaling:
      enabled: true
      # minReplicas: 1
      # maxReplicas: 100
      # targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80
    nodeSelector: {}
    tolerations: []
    affinity: {}
