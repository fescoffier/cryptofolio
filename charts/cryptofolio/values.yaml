# Default values for cryptofolio.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# --- API
api:
  environment: Production
  config:
    logLevel: Information
    secrets:
      connectionStrings:
        name: connection-strings
        data:
          cryptofolioContext: cryptofolio-context
    connectionStrings:
      redis: redis-master-0.redis-headless.default.svc.cluster.local:6379,redis-replicas-0.redis-headless.default.svc.cluster.local:6379,redis-replicas-1.redis-headless.default.svc.cluster.local:6379
    kafka:
      producerConfig:
        {
          "BootstrapServers": "kafka-0.kafka-headless.default.svc.cluster.local:9092,kafka-1.kafka-headless.default.svc.cluster.local:9092,kafka-2.kafka-headless.default.svc.cluster.local:9092"
        }
      consumerConfig:
        {
          "BootstrapServers": "kafka-0.kafka-headless.default.svc.cluster.local:9092,kafka-1.kafka-headless.default.svc.cluster.local:9092,kafka-2.kafka-headless.default.svc.cluster.local:9092",
          "GroupId": "job-collector",
          "AutoOffsetReset": "Earliest",
          "EnablePartitionEof": true,
          "EnableAutoCommit": false,
          "MaxPollIntervalMs": 300000
        }
    elasticsearch:
      {
        "Nodes": [
          "http://elasticsearch-0.elasticsearch-headless.default.svc.cluster.local:9200",
          "http://elasticsearch-1.elasticsearch-headless.default.svc.cluster.local:9200",
          "http://elasticsearch-2.elasticsearch-headless.default.svc.cluster.local:9200"
        ]
      }
  replicaCount: 2
  image:
    repository: registry.digitalocean.com/cryptofolio/api
    pullPolicy: Always
    tag: latest
  imagePullSecrets: []
  nameOverride: "cryptofolio-api"
  fullnameOverride: "cryptofolio-api"
  serviceAccount:
    create: false
    name: "cryptofolio-api"
    annotations: {}
    imagePullSecrets:
      - name: cryptofolio
  podAnnotations: {}
  podSecurityContext: {}
    # fsGroup: 2000
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    hosts:
      - host: app.cryptofolio.dev
        paths:
          - value: /api
            type: Prefix
    paths:
      - /api
    tls:
     - secretName: cryptofolio-tls
       hosts:
         - app.cryptofolio.dev
  resources:
    requests:
      cpu: 10m
      memory: 256Mi
    limits:
      cpu: 1
      memory: 1Gi
  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
  readinessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
  autoscaling:
    enabled: false
    # minReplicas: 1
    # maxReplicas: 100
    # targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

# --- App
app:
  environment: Production
  config:
    logLevel: Verbose
    secrets:
      connectionStrings:
        name: connection-strings
        data:
          cryptofolioContext: cryptofolio-context
          identityContext: identity-context
      users:
        name: cryptofolio-app-users
        data:
          fileName: appsettings.Users.json
    connectionStrings:
      redis: redis-master-0.redis-headless.default.svc.cluster.local:6379,redis-replicas-0.redis-headless.default.svc.cluster.local:6379,redis-replicas-1.redis-headless.default.svc.cluster.local:6379
    kafka:
      producerConfig:
        {
          "BootstrapServers": "kafka-0.kafka-headless.default.svc.cluster.local:9092,kafka-1.kafka-headless.default.svc.cluster.local:9092,kafka-2.kafka-headless.default.svc.cluster.local:9092"
        }
      consumerConfig:
        {
          "BootstrapServers": "kafka-0.kafka-headless.default.svc.cluster.local:9092,kafka-1.kafka-headless.default.svc.cluster.local:9092,kafka-2.kafka-headless.default.svc.cluster.local:9092",
          "GroupId": "job-collector",
          "AutoOffsetReset": "Earliest",
          "EnablePartitionEof": true,
          "EnableAutoCommit": false,
          "MaxPollIntervalMs": 300000
        }
    elasticsearch:
      {
        "Nodes": [
          "http://elasticsearch-0.elasticsearch-headless.default.svc.cluster.local:9200",
          "http://elasticsearch-1.elasticsearch-headless.default.svc.cluster.local:9200",
          "http://elasticsearch-2.elasticsearch-headless.default.svc.cluster.local:9200"
        ]
      }
    api:
      url: https://app.cryptofolio.dev/api
  replicaCount: 2
  image:
    repository: registry.digitalocean.com/cryptofolio/app
    pullPolicy: Always
    tag: latest
  imagePullSecrets: []
  nameOverride: "cryptofolio-app"
  fullnameOverride: "cryptofolio-app"
  serviceAccount:
    create: false
    name: "cryptofolio-app"
    annotations: {}
    imagePullSecrets:
      - name: cryptofolio
  podAnnotations: {}
  podSecurityContext: {}
    # fsGroup: 2000
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/affinity: "cookie"
      nginx.ingress.kubernetes.io/affinity-mode: "persistent"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    hosts:
      - host: app.cryptofolio.dev
        paths:
          - value: /
            type: Prefix
    paths:
      - /
    tls:
     - secretName: cryptofolio-tls
       hosts:
         - app.cryptofolio.dev
  resources:
    requests:
      cpu: 10m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi
  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
  readinessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
  autoscaling:
    enabled: false
    # minReplicas: 1
    # maxReplicas: 100
    # targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

jobs:
  # --- Collector job
  collector:
    environment: Production
    config:
      logLevel: Information
      secrets:
        connectionStrings:
          name: connection-strings
          data:
            cryptofolioContext: cryptofolio-context
        fixer:
          name: fixer
          data:
            apiKey: apiKey
      connectionStrings:
        redis: redis-master-0.redis-headless.default.svc.cluster.local:6379,redis-replicas-0.redis-headless.default.svc.cluster.local:6379,redis-replicas-1.redis-headless.default.svc.cluster.local:6379
      kafka:
        producerConfig:
          {
            "BootstrapServers": "kafka-0.kafka-headless.default.svc.cluster.local:9092,kafka-1.kafka-headless.default.svc.cluster.local:9092,kafka-2.kafka-headless.default.svc.cluster.local:9092"
          }
        consumerConfig:
          {
            "BootstrapServers": "kafka-0.kafka-headless.default.svc.cluster.local:9092,kafka-1.kafka-headless.default.svc.cluster.local:9092,kafka-2.kafka-headless.default.svc.cluster.local:9092",
            "GroupId": "job-collector",
            "AutoOffsetReset": "Earliest",
            "EnablePartitionEof": true,
            "EnableAutoCommit": false,
            "MaxPollIntervalMs": 300000
          }
      elasticsearch:
        {
          "Nodes": [
            "http://elasticsearch-0.elasticsearch-headless.default.svc.cluster.local:9200",
            "http://elasticsearch-1.elasticsearch-headless.default.svc.cluster.local:9200",
            "http://elasticsearch-2.elasticsearch-headless.default.svc.cluster.local:9200"
          ]
        }
      data:
        cronCheckIntervalMs: 1000
        schedules:
          assetDataRequest: "0 0 * * *"
          assetTickerDataRequest: "* * * * *"
          currencyTickerDataRequest: "*/10 * * * *"
          exchangeDataRequest: "0 0 * * *"
        schedulersLockKey: Collector:SchedulersLock
        schedulersLockExpiration: "00:01:00"
        schedulersLockCheckInterval: "00:00:01"
        schedulersHashKey: Collector:Schedulers
        schedulesHashKeyFormat: Collector:Schedules:{0}
      coingecko:
        apiUri: https://api.coingeck.com/api/v3
        rateLimiterKey: Coingecko:Calls
        rateLimiterKeyExiprationSeconds: 90
        rateLimiterMaxValue: 50
        rateLimiterCheckIntervalMs: 1000
    replicaCount: 2
    image:
      repository: registry.digitalocean.com/cryptofolio/jobs/collector
      pullPolicy: Always
      tag: latest
    imagePullSecrets: []
    nameOverride: cryptofolio-collector-job
    fullnameOverride: cryptofolio-collector-job
    serviceAccount:
      create: false
      name: cryptofolio-collector-job
      annotations: {}
      imagePullSecrets:
        - name: cryptofolio
    podAnnotations: {}
    podSecurityContext: {}
      # fsGroup: 2000
    securityContext: {}
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
      # runAsUser: 1000
    resources:
      requests:
        cpu: 10m
        memory: 128Mi
      limits:
        cpu: 1
        memory: 1G
    livenessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
    autoscaling:
      enabled: false
      # minReplicas: 1
      # maxReplicas: 100
      # targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80
    nodeSelector: {}
    tolerations: []
    affinity: {}
  # --- Handlers job
  handlers:
    environment: Production
    config:
      logLevel: Information
      secrets:
        connectionStrings:
          name: connection-strings
          data:
            cryptofolioContext: cryptofolio-context
      connectionStrings:
        redis: redis-master-0.redis-headless.default.svc.cluster.local:6379,redis-replicas-0.redis-headless.default.svc.cluster.local:6379,redis-replicas-1.redis-headless.default.svc.cluster.local:6379
      kafka:
        producerConfig:
          {
            "BootstrapServers": "kafka-0.kafka-headless.default.svc.cluster.local:9092,kafka-1.kafka-headless.default.svc.cluster.local:9092,kafka-2.kafka-headless.default.svc.cluster.local:9092"
          }
        consumerConfig:
          {
            "BootstrapServers": "kafka-0.kafka-headless.default.svc.cluster.local:9092,kafka-1.kafka-headless.default.svc.cluster.local:9092,kafka-2.kafka-headless.default.svc.cluster.local:9092",
            "GroupId": "job-handlers",
            "AutoOffsetReset": "Earliest",
            "EnablePartitionEof": true,
            "EnableAutoCommit": false,
            "MaxPollIntervalMs": 300000
          }
      elasticsearch:
        {
          "Nodes": [
            "http://elasticsearch-0.elasticsearch-headless.default.svc.cluster.local:9200",
            "http://elasticsearch-1.elasticsearch-headless.default.svc.cluster.local:9200",
            "http://elasticsearch-2.elasticsearch-headless.default.svc.cluster.local:9200"
          ],
          "Indices": {
            "Cryptofolio.Infrastructure.IEvent": "events-{0:yyyy.MM}"
          },
          "SerializationOptions": {}
        }
    replicaCount: 2
    image:
      repository: registry.digitalocean.com/cryptofolio/jobs/handlers
      pullPolicy: Always
      tag: latest
    imagePullSecrets: []
    nameOverride: cryptofolio-handlers-job
    fullnameOverride: cryptofolio-handlers-job
    serviceAccount:
      create: false
      annotations: {}
      name: cryptofolio-handlers-job
    podAnnotations: {}
    podSecurityContext: {}
      # fsGroup: 2000
    securityContext: {}
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
      # runAsUser: 1000
    resources:
      requests:
        cpu: 10m
        memory: 128Mi
      limits:
        cpu: 1
        memory: 512Mi
    autoscaling:
      enabled: false
      # minReplicas: 1
      # maxReplicas: 100
      # targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80
    nodeSelector: {}
    tolerations: []
    affinity: {}
  # --- Balances job
  balances:
    environment: Production
    config:
      logLevel: Information
      secrets:
        connectionStrings:
          name: connection-strings
          data:
            cryptofolioContext: cryptofolio-context
      connectionStrings:
        redis: redis-master-0.redis-headless.default.svc.cluster.local:6379,redis-replicas-0.redis-headless.default.svc.cluster.local:6379,redis-replicas-1.redis-headless.default.svc.cluster.local:6379
      kafka:
        producerConfig:
          {
            "BootstrapServers": "kafka-0.kafka-headless.default.svc.cluster.local:9092,kafka-1.kafka-headless.default.svc.cluster.local:9092,kafka-2.kafka-headless.default.svc.cluster.local:9092"
          }
        consumerConfig:
          {
            "BootstrapServers": "kafka-0.kafka-headless.default.svc.cluster.local:9092,kafka-1.kafka-headless.default.svc.cluster.local:9092,kafka-2.kafka-headless.default.svc.cluster.local:9092",
            "GroupId": "job-handlers",
            "AutoOffsetReset": "Earliest",
            "EnablePartitionEof": true,
            "EnableAutoCommit": false,
            "MaxPollIntervalMs": 300000
          }
      elasticsearch:
        {
          "Nodes": [
            "http://elasticsearch-0.elasticsearch-headless.default.svc.cluster.local:9200",
            "http://elasticsearch-1.elasticsearch-headless.default.svc.cluster.local:9200",
            "http://elasticsearch-2.elasticsearch-headless.default.svc.cluster.local:9200"
          ]
        }
      bulk:
        batchSize: 5000
    replicaCount: 6
    image:
      repository: registry.digitalocean.com/cryptofolio/jobs/balances
      pullPolicy: Always
      tag: latest
    imagePullSecrets: []
    nameOverride: cryptofolio-balances-job
    fullnameOverride: cryptofolio-balances-job
    serviceAccount:
      create: false
      annotations: {}
      name: cryptofolio-balances-job
    podAnnotations: {}
    podSecurityContext: {}
      # fsGroup: 2000
    securityContext: {}
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
      # runAsUser: 1000
    resources:
      requests:
        cpu: 10m
        memory: 128Mi
      limits:
        cpu: 500m
        memory: 512Mi
    autoscaling:
      enabled: false
      # minReplicas: 1
      # maxReplicas: 100
      # targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80
    nodeSelector: {}
    tolerations: []
    affinity: {}
